#*
   Copyright (c) 2021 LinkedIn Corp.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*#
#if (${spec.getResource().hasAssociation()})
  #define($ScatteredKey) ## list each part in AssocKeyOnly
  #set($compoundKeySpec = ${spec.getCompoundKeySpec()})
  #set($assocKeyLen = ${compoundKeySpec.getAssocKeySpecs().size()})
  #set($lastCompoundKeyPart = ${compoundKeySpec.getAssocKeySpecs().get($assocKeyLen - 1)})
  #if($assocKeyLen > 1)
    #foreach($idx in [2..$assocKeyLen])
      //idx
      #set($compoundKeyPart = ${compoundKeySpec.getAssocKeySpecs().get($idx - 2)})
      ${compoundKeyPart.bindingType} ${compoundKeyPart.name},
    #end
  #end
  ${lastCompoundKeyPart.bindingType} ${lastCompoundKeyPart.name}#if($method.requiredParams.size() > 0),#end
  #end

  #define($GenerateCompoundKey)
  CompoundKey ${spec.idName} = ${spec.className}.Key
              #foreach($assoc_key in ${spec.getCompoundKeySpec().getAssocKeySpecs()}
                .set$util.nameCapsCase($assoc_key.name)($assoc_key.name)
              #end
  #end
#end

  #if($method.optionalParams.size() > 0 || $method.supportedProjectionParams.size() > 0)
    #doc($method.schema.doc)
    public CompletionStage<${spec.entityClassName}> get(
      #if (!${spec.getResource().hasSimple()})
        $spec.keyClassName $spec.idName#if($method.requiredParams.size() > 0),#end
      #end
        #**##methodParams($method, false)##
      ) {
      return get(#if(${spec.idName})${spec.idName},#end
          #**##optionalMethodCallArgs($method)##
      );
    }


    #doc($method.schema.doc)
    public CompletionStage<${spec.entityClassName}> get(
      #if (!${spec.getResource().hasSimple()})
        $spec.keyClassName $spec.idName,
      #end
        ExecutionGroup executionGroup#if($method.requiredParams.size() > 0),#end
        #**##methodParams($method, false)##
      ) {
      return get(#if(${spec.idName})${spec.idName},#end
          executionGroup,
          #**##optionalMethodCallArgs($method)##
      );
    }

    ### For associations ###
    #if (${spec.getResource().hasAssociation()})
    #doc($method.schema.doc)
    public CompletionStage<${spec.entityClassName}> get(
$ScatteredKey
        #**##methodParams($method, false)##
      ) {
$GenerateCompoundKey
      return get(${spec.idName},
          #**##optionalMethodCallArgs($method)##
      );
    }


    #doc($method.schema.doc)
    public CompletionStage<${spec.entityClassName}> get(
$ScatteredKey
        ExecutionGroup executionGroup#if($method.requiredParams.size() > 0),#end
        #**##methodParams($method, false)##
      ) {
$GenerateCompoundKey
      return get(${spec.idName},
          executionGroup,
          #**##optionalMethodCallArgs($method)##
      );
    }
    #end ## end for associations key binding methods
  #end

  #define($GetRequestCommon)
    #**##paramsRequestMap($method)##
    GetRequest<${spec.entityClassName}> request = new GetRequest<>(
        Collections.emptyMap(),
        Collections.emptyList(),
        ${spec.entityClassName}.class,
        #if(${spec.idName})
    #**#$spec.idName##
        #else
    #**#null##
        #end,
        queryParams,
        queryParamClasses,
        _resourceSpec,
        ORIGINAL_RESOURCE_PATH,
        buildReadOnlyPathKeys(),
        RestliRequestOptions.DEFAULT_OPTIONS);
  #end

  #doc($method.schema.doc)
  public CompletionStage<${spec.entityClassName}> get(
    #if (!${spec.getResource().hasSimple()})
      $spec.keyClassName $spec.idName#if( $method.hasParams()),#end
    #end
      #**##methodParams($method, true)##
      ) {
$GetRequestCommon
    #**##makeRequestAndReturn(
      ${spec.entityClassName}, 
      ${spec.entityClassName}, 
      "resp.getEntity()",
      false
    )##
  }

  #doc($method.schema.doc)
  public CompletionStage<${spec.entityClassName}> get(
    #if (!${spec.getResource().hasSimple()})
      $spec.keyClassName $spec.idName,
    #end
      ExecutionGroup executionGroup#if( $method.hasParams()),#end
      #**##methodParams($method, true)##
      ) {
$GetRequestCommon
    #**##makeRequestAndReturn(
      ${spec.entityClassName}, 
      ${spec.entityClassName}, 
      "resp.getEntity()",
      true
    )##
  }

  ### For associations ###
  #if (${spec.getResource().hasAssociation()})
  #doc($method.schema.doc)
  public CompletionStage<${spec.entityClassName}> get(
$ScatteredKey
      #**##methodParams($method, true)##
      ) {
$GetRequestCommon
    #**##makeRequestAndReturn(
      ${spec.entityClassName}, 
      ${spec.entityClassName}, 
      "resp.getEntity()",
      false
    )##
  }

  #doc($method.schema.doc)
  public CompletionStage<${spec.entityClassName}> get(
$ScatteredKey
      ExecutionGroup executionGroup#if( $method.hasParams()),#end
      #**##methodParams($method, true)##
      ) {
$GetRequestCommon
    #**##makeRequestAndReturn(
      ${spec.entityClassName}, 
      ${spec.entityClassName}, 
      "resp.getEntity()",
      true
    )##
  }
  #end ## end for associations key binding methods

  #optionalParamClass($method)